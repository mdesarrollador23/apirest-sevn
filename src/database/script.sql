USE [PRESTAMOS_DB]
GO
IF OBJECT_ID (N'[dbo].[EMPLOYEES]') IS NOT NULL
	DROP TABLE [DBO].[EMPLOYEES];
GO
IF OBJECT_ID (N'[dbo].[CUSTOMERS_ACCOUNT]') IS NOT NULL
	DROP TABLE [DBO].[CUSTOMERS_ACCOUNT];
GO
IF OBJECT_ID (N'[dbo].[CUSTOMERS]') IS NOT NULL
	DROP TABLE [DBO].[CUSTOMERS];
GO
IF OBJECT_ID (N'SP_CREATE_CUSTOMERS') IS NOT NULL
	DROP PROCEDURE SP_CREATE_CUSTOMERS;
GO
IF OBJECT_ID (N'SP_UPDATE_CUSTOMERS_BY_ID') IS NOT NULL
	DROP PROCEDURE SP_UPDATE_CUSTOMERS_BY_ID;
GO
--TABLA CLIENTES
CREATE TABLE DBO.CUSTOMERS(
	ID INT IDENTITY(1,1) CONSTRAINT PK_CUSTOMERS PRIMARY KEY,
	FISCAL_IDENTITY VARCHAR(14) NOT NULL UNIQUE,
	FIRST_NAME VARCHAR(25) NOT NULL,
	LAST_NAME VARCHAR(25) NOT NULL,
	OFFICE_PHONE VARCHAR(14),
	MOBILE_PHONE VARCHAR(14),
	EMAIL VARCHAR(25) NULL,
	ADDRESS VARCHAR(50));
GO 
--TABLA DE CUENTASCLIENTES
CREATE TABLE DBO.CUSTOMERS_ACCOUNT(
	ID INT IDENTITY(1,1) CONSTRAINT PK_CUSTOMERS_ACCOUNT PRIMARY KEY,
	CUSTOMERS_ID INT CONSTRAINT FK_CUSTOMERS_CUSTOMERS_ACCOUNT FOREIGN KEY (CUSTOMERS_ID) REFERENCES CUSTOMERS(ID) NOT NULL,
	USERNAME VARCHAR(10) NOT NULL,
	HAS_PASSWORD VARCHAR(64) NOT NULL,
	STATUS BIT NULL DEFAULT 1);
GO 
--TABLA EMPLEADOS DEL NEGOCIO
CREATE TABLE DBO.EMPLOYEES(
	ID INT IDENTITY(1,1) CONSTRAINT PK_EMPLEADOS PRIMARY KEY,
	USERNAME VARCHAR(50) NOT NULL,
	FIRST_NAME VARCHAR(50) NOT NULL,
	LAST_NAME VARCHAR(50) NULL,
	HAS_PASSWORD VARCHAR(60) NULL,
	STATUS BIT NULL DEFAULT 1);
GO
INSERT INTO DBO.EMPLOYEES(USERNAME, FIRST_NAME, LAST_NAME, HAS_PASSWORD, STATUS)VALUES('mdejesus','Miguel','De Jesus','',1);
INSERT INTO DBO.EMPLOYEES(USERNAME, FIRST_NAME, LAST_NAME, HAS_PASSWORD, STATUS)VALUES('hdejesus','Henrry','De Jesus','',1);
GO


--------------------------------STORE PROCEDURES---------------------------------------------------------
--#-- STORE PROCEDURE CREAR CLIENTES CON SU USUARIO
CREATE PROCEDURE SP_CREATE_CUSTOMERS
@FISCAL_IDENTITY VARCHAR(14),
@FIRST_NAME VARCHAR(25),
@LAST_NAME VARCHAR(25),
@OFFICE_PHONE VARCHAR(14),
@MOBILE_PHONE VARCHAR(14),
@EMAIL VARCHAR(25),
@ADDRESS VARCHAR(50),
@USERNAME VARCHAR(10),
@HAS_PASSWORD VARCHAR(64),
@CUSTOMERS_ID INT OUTPUT
AS
BEGIN
	BEGIN TRY
        BEGIN TRANSACTION;

        IF EXISTS (SELECT TOP 1 * FROM DBO.CUSTOMERS WHERE FISCAL_IDENTITY = @FISCAL_IDENTITY)
        BEGIN
			DECLARE @ErrorMessage NVARCHAR(4000) = 'La cliente ya existe.';
            DECLARE @ErrorSeverity INT = 16;
            RAISERROR (@ErrorMessage, @ErrorSeverity, 1);
            RETURN; 
        END
        DECLARE @FirstTableID INT;
        INSERT INTO DBO.CUSTOMERS (FISCAL_IDENTITY, FIRST_NAME, LAST_NAME, OFFICE_PHONE, MOBILE_PHONE, EMAIL, ADDRESS)
        VALUES (@FISCAL_IDENTITY, @FIRST_NAME, @LAST_NAME, @OFFICE_PHONE, @MOBILE_PHONE, @EMAIL, @ADDRESS);
        SET @FirstTableID = SCOPE_IDENTITY();
        INSERT INTO DBO.CUSTOMERS_ACCOUNT (CUSTOMERS_ID, USERNAME, HAS_PASSWORD)
        VALUES (@FirstTableID, @USERNAME, @HAS_PASSWORD);
        SET @CUSTOMERS_ID = @FirstTableID;
        COMMIT;
    END TRY
	BEGIN CATCH
        SET @ErrorMessage  = ERROR_MESSAGE();
        SET @ErrorSeverity = ERROR_SEVERITY();
        RAISERROR (@ErrorMessage, @ErrorSeverity, 1);
        ROLLBACK; 
    END CATCH;
END;
GO
--#-- STORE PROCEDURE UPDATE CLIENTES
CREATE PROCEDURE SP_UPDATE_CUSTOMERS_BY_ID
    @ID INT, 
    @FIRST_NAME VARCHAR(25),
    @LAST_NAME VARCHAR(25),
    @OFFICE_PHONE VARCHAR(14),
    @MOBILE_PHONE VARCHAR(14),
    @EMAIL VARCHAR(25),
    @ADDRESS VARCHAR(50)
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        IF NOT EXISTS (SELECT 1 FROM DBO.CUSTOMERS WHERE ID = @ID)
        BEGIN
            DECLARE @ErrorMessage NVARCHAR(4000) = 'El cliente no existe.';
            DECLARE @ErrorSeverity INT = 16;
            RAISERROR (@ErrorMessage, @ErrorSeverity, 1);
            RETURN; 
        END

        -- Actualizar los datos del cliente
        UPDATE DBO.CUSTOMERS
        SET FIRST_NAME = @FIRST_NAME,
            LAST_NAME = @LAST_NAME,
            OFFICE_PHONE = @OFFICE_PHONE,
            MOBILE_PHONE = @MOBILE_PHONE,
            EMAIL = @EMAIL,
            ADDRESS = @ADDRESS
        WHERE ID = @ID;

        COMMIT;
    END TRY
    BEGIN CATCH
        SET @ErrorMessage  = ERROR_MESSAGE();
        SET @ErrorSeverity = ERROR_SEVERITY();
        RAISERROR (@ErrorMessage, @ErrorSeverity, 1);
        ROLLBACK; 
    END CATCH;
END;
GO

